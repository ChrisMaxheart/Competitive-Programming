#define isOn(S, j) (S & (1 << j))
#define setBit(S, j) (S |= (1 << j))
#define clearBit(S, j) (S &= ~(1 << j))
#define toggleBit(S, j) (S ^= (1 << j))
#define lowBit(S) (S & (-S))
#define setAll(S, n) (S = (1 << n) - 1)

#define modulo(S, N) ((S) & (N - 1))   // returns S % N, where N is a power of 2
#define isPowerOfTwo(S) (!(S & (S - 1)))
#define nearestPowerOfTwo(S) ((int)pow(2.0, (int)((log((double)S) / log(2.0)) + 0.5)))
#define turnOffLastBit(S) ((S) & (S - 1))
#define turnOnLastZero(S) ((S) | (S + 1))
#define turnOffLastConsecutiveBits(S) ((S) & (S + 1))
#define turnOnLastConsecutiveZeroes(S) ((S) | (S - 1))

#define LSOne(S) (S & (-S))

class FenwickTree { private:
    vector<long long int> ft;
    int n;

  public:
    FenwickTree(int _n) : n(_n) {
      ft.assign(n+1, 0);
    }

    FenwickTree(const vector<int>& f) : n(f.size() - 1) {
      ft.assign(n+1, 0);
      for(int i = 1; i <= n; ++i) {
        ft[i] += f[i];
        if(i + LSOne(i) <= n) {
          ft[i + LSOne(i)] += ft[i];
        }
      }
    }

    long long int rsq(int b) {
      long long int sum = 0;
      for(; b; b -= LSOne(b)) {
        sum += ft[b];
      }
      return sum;
    }

    long long int rsq(int a, int b) {
      return rsq(b) - rsq(a);
    }

    void adjust(int k, long long int v) {
      for(; k <=n; k += LSOne(k)) {
        ft[k] += v;
      }
    }
};
